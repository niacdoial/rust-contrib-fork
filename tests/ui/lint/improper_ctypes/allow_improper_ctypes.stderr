error: `repr(C)` type uses type `String`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:15:1
   |
LL | struct UnsafeStruct (String);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `String`
   = note: `String` has unspecified layout
note: the lint level is defined here
  --> $DIR/allow_improper_ctypes.rs:1:53
   |
LL | #![deny(improper_ctypes, improper_c_fn_definitions, improper_ctype_definitions)]
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `extern` callback uses type `(i32, i32)`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:37:20
   |
LL | type UnsafeFnPtr = extern "C" fn((i32, i32))->i32;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn((i32, i32)) -> i32` is FFI-unsafe due to `(i32, i32)`
   = help: consider using a struct instead
   = note: tuples have unspecified layout
note: the lint level is defined here
  --> $DIR/allow_improper_ctypes.rs:2:9
   |
LL | #![deny(improper_c_callbacks)]
   |         ^^^^^^^^^^^^^^^^^^^^

error: `extern` fn uses type `&String`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:73:23
   |
LL | extern "C" fn fn1u(e: &String) -> &str {&*e}
   |                       ^^^^^^^ not FFI-safe
   |
   = help: consider using a raw pointer, or wrapping `&String` in an `Option<_>`
   = note: boxes, references, and function pointers are assumed to be valid (non-null, non-dangling, aligned) pointers,
           which cannot be garanteed if their values are produced by non-rust code
note: the lint level is defined here
  --> $DIR/allow_improper_ctypes.rs:1:26
   |
LL | #![deny(improper_ctypes, improper_c_fn_definitions, improper_ctype_definitions)]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^

error: `extern` fn uses type `&str`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:73:35
   |
LL | extern "C" fn fn1u(e: &String) -> &str {&*e}
   |                                   ^^^^ not FFI-safe
   |
   = help: consider using `*const u8` and a length instead
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` fn uses type `UnsafeStruct`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:79:23
   |
LL | extern "C" fn fn2u(e: UnsafeStruct) {}
   |                       ^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`UnsafeStruct`) is FFI-unsafe due to a `String` field
note: the type is defined here
  --> $DIR/allow_improper_ctypes.rs:15:1
   |
LL | struct UnsafeStruct (String);
   | ^^^^^^^^^^^^^^^^^^^
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `String`
   = note: `String` has unspecified layout

error: `extern` fn uses type `outer::UnsafeStruct`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:83:24
   |
LL | extern "C" fn fn2ou(e: outer::UnsafeStruct) {}
   |                        ^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`outer::UnsafeStruct`) is FFI-unsafe due to a `String` field
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `String`
   = note: `String` has unspecified layout

error: `extern` fn uses type `AllowedUnsafeStruct`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:88:23
   |
LL | extern "C" fn fn3u(e: AllowedUnsafeStruct) {}
   |                       ^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`AllowedUnsafeStruct`) is FFI-unsafe due to a `String` field
note: the type is defined here
  --> $DIR/allow_improper_ctypes.rs:20:1
   |
LL | struct AllowedUnsafeStruct (String);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `String`
   = note: `String` has unspecified layout

error: `extern` fn uses type `outer::AllowedUnsafeStruct`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:93:24
   |
LL | extern "C" fn fn3ou(e: outer::AllowedUnsafeStruct) {}
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`outer::AllowedUnsafeStruct`) is FFI-unsafe due to a `String` field
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `String`
   = note: `String` has unspecified layout

error: `extern` fn uses type `UnsafeFromForeignStruct<'_>`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:99:23
   |
LL | extern "C" fn fn4u(e: UnsafeFromForeignStruct) {}
   |                       ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`UnsafeFromForeignStruct<'_>`) is FFI-unsafe due to a `&u32` field
note: the type is defined here
  --> $DIR/allow_improper_ctypes.rs:28:1
   |
LL | struct UnsafeFromForeignStruct<'a> (&'a u32);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider using a raw pointer, or wrapping `&u32` in an `Option<_>`
   = note: boxes, references, and function pointers are assumed to be valid (non-null, non-dangling, aligned) pointers,
           which cannot be garanteed if their values are produced by non-rust code

error: `extern` fn uses type `outer::UnsafeFromForeignStruct<'_>`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:103:24
   |
LL | extern "C" fn fn4ou(e: outer::UnsafeFromForeignStruct) {}
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`outer::UnsafeFromForeignStruct<'_>`) is FFI-unsafe due to a `&u32` field
   = help: consider using a raw pointer, or wrapping `&u32` in an `Option<_>`
   = note: boxes, references, and function pointers are assumed to be valid (non-null, non-dangling, aligned) pointers,
           which cannot be garanteed if their values are produced by non-rust code

error: `repr(C)` type uses type `(A, usize)`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:136:1
   |
LL | / struct FakeVTable<A>{
LL | |
LL | |     make_new: extern "C" fn() -> A,
LL | |     combine: extern "C" fn(&[A]) -> A,
...  |
LL | |     something_else: (A, usize),
LL | | }
   | |_^ not FFI-safe
   |
   = help: consider using a struct instead
   = note: tuples have unspecified layout

error: `extern` callback uses type `&[A]`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:139:14
   |
LL |     combine: extern "C" fn(&[A]) -> A,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `for<'a> extern "C" fn(&'a [A]) -> A` is FFI-unsafe due to `&[A]`
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` callback uses type `FakeVTable<u32>`, which is not FFI-safe
  --> $DIR/allow_improper_ctypes.rs:145:24
   |
LL | type FakeVTableMaker = extern "C" fn() -> FakeVTable<u32>;
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn() -> FakeVTable<u32>` is FFI-unsafe due to `FakeVTable<u32>`
   = note: this struct/enum/union (`FakeVTable<u32>`) is FFI-unsafe due to a `(u32, usize)` field
note: the type is defined here
  --> $DIR/allow_improper_ctypes.rs:136:1
   |
LL | struct FakeVTable<A>{
   | ^^^^^^^^^^^^^^^^^^^^
   = help: consider using a struct instead
   = note: tuples have unspecified layout

error: aborting due to 13 previous errors

