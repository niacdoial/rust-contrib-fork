error: `extern` callback uses type `(u32, u64)`, which is not FFI-safe
  --> $DIR/lint-fn.rs:30:23
   |
LL | pub type RustBadRet = extern "C" fn() -> (u32,u64);
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn() -> (u32, u64)` is FFI-unsafe due to `(u32, u64)`
   = help: consider using a struct instead
   = note: tuples have unspecified layout
note: the lint level is defined here
  --> $DIR/lint-fn.rs:3:9
   |
LL | #![deny(improper_c_callbacks)]
   |         ^^^^^^^^^^^^^^^^^^^^

error: `extern` fn uses type `&[u32]`, which is not FFI-safe
  --> $DIR/lint-fn.rs:71:33
   |
LL | pub extern "C" fn slice_type(p: &[u32]) { }
   |                                 ^^^^^^ not FFI-safe
   |
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer
note: the lint level is defined here
  --> $DIR/lint-fn.rs:2:26
   |
LL | #![deny(improper_ctypes, improper_c_fn_definitions)]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^

error: `extern` fn uses type `&str`, which is not FFI-safe
  --> $DIR/lint-fn.rs:74:31
   |
LL | pub extern "C" fn str_type(p: &str) { }
   |                               ^^^^ not FFI-safe
   |
   = help: consider using `*const u8` and a length instead
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` fn uses type `Box<u32>`, which is not FFI-safe
  --> $DIR/lint-fn.rs:77:31
   |
LL | pub extern "C" fn box_type(p: Box<u32>) { }
   |                               ^^^^^^^^ not FFI-safe
   |
   = help: consider using a raw pointer, or wrapping `Box<u32>` in an `Option<_>`
   = note: boxes, references, and function pointers are assumed to be valid (non-null, non-dangling, aligned) pointers,
           which cannot be garanteed if their values are produced by non-rust code

error: `extern` fn uses type `Box<[u8]>`, which is not FFI-safe
  --> $DIR/lint-fn.rs:83:34
   |
LL | pub extern "C" fn boxed_slice(p: Box<[u8]>) { }
   |                                  ^^^^^^^^^ not FFI-safe
   |
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: this box for an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` fn uses type `Box<str>`, which is not FFI-safe
  --> $DIR/lint-fn.rs:86:35
   |
LL | pub extern "C" fn boxed_string(p: Box<str>) { }
   |                                   ^^^^^^^^ not FFI-safe
   |
   = help: consider using `*const u8` and a length instead
   = note: this box for an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` fn uses type `Box<dyn Trait>`, which is not FFI-safe
  --> $DIR/lint-fn.rs:89:34
   |
LL | pub extern "C" fn boxed_trait(p: Box<dyn Trait>) { }
   |                                  ^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this box for an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` fn uses type `char`, which is not FFI-safe
  --> $DIR/lint-fn.rs:92:32
   |
LL | pub extern "C" fn char_type(p: char) { }
   |                                ^^^^ not FFI-safe
   |
   = help: consider using `u32` or `libc::wchar_t` instead
   = note: the `char` type has no C equivalent

error: `extern` fn uses type `i128`, which is not FFI-safe
  --> $DIR/lint-fn.rs:95:32
   |
LL | pub extern "C" fn i128_type(p: i128) { }
   |                                ^^^^ not FFI-safe
   |
   = note: 128-bit integers don't currently have a known stable ABI

error: `extern` fn uses type `u128`, which is not FFI-safe
  --> $DIR/lint-fn.rs:98:32
   |
LL | pub extern "C" fn u128_type(p: u128) { }
   |                                ^^^^ not FFI-safe
   |
   = note: 128-bit integers don't currently have a known stable ABI

error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe
  --> $DIR/lint-fn.rs:101:33
   |
LL | pub extern "C" fn tuple_type(p: (i32, i32)) { }
   |                                 ^^^^^^^^^^ not FFI-safe
   |
   = help: consider using a struct instead
   = note: tuples have unspecified layout

error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe
  --> $DIR/lint-fn.rs:104:34
   |
LL | pub extern "C" fn tuple_type2(p: I32Pair) { }
   |                                  ^^^^^^^ not FFI-safe
   |
   = help: consider using a struct instead
   = note: tuples have unspecified layout

error: `extern` fn uses type `ZeroSize`, which is not FFI-safe
  --> $DIR/lint-fn.rs:107:32
   |
LL | pub extern "C" fn zero_size(p: ZeroSize) { }
   |                                ^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: `ZeroSize` has no fields
note: the type is defined here
  --> $DIR/lint-fn.rs:26:1
   |
LL | pub struct ZeroSize;
   | ^^^^^^^^^^^^^^^^^^^

error: `extern` fn uses type `ZeroSizeWithPhantomData`, which is not FFI-safe
  --> $DIR/lint-fn.rs:110:40
   |
LL | pub extern "C" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: composed only of `PhantomData`
note: the type is defined here
  --> $DIR/lint-fn.rs:61:1
   |
LL | pub struct ZeroSizeWithPhantomData(PhantomData<i32>);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `extern` fn uses type `PhantomData<bool>`, which is not FFI-safe
  --> $DIR/lint-fn.rs:113:51
   |
LL | pub extern "C" fn zero_size_phantom_toplevel() -> PhantomData<bool> {
   |                                                   ^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: composed only of `PhantomData`

error: `extern` fn uses type `fn()`, which is not FFI-safe
  --> $DIR/lint-fn.rs:118:30
   |
LL | pub extern "C" fn fn_type(p: RustFn) { }
   |                              ^^^^^^ not FFI-safe
   |
   = help: consider using an `extern fn(...) -> ...` function pointer instead
   = note: this function pointer has Rust-specific calling convention

error: `extern` fn uses type `fn()`, which is not FFI-safe
  --> $DIR/lint-fn.rs:121:31
   |
LL | pub extern "C" fn fn_type2(p: fn()) { }
   |                               ^^^^ not FFI-safe
   |
   = help: consider using an `extern fn(...) -> ...` function pointer instead
   = note: this function pointer has Rust-specific calling convention

error: `extern` fn uses type `TransparentI128`, which is not FFI-safe
  --> $DIR/lint-fn.rs:127:39
   |
LL | pub extern "C" fn transparent_i128(p: TransparentI128) { }
   |                                       ^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`TransparentI128`) is FFI-unsafe due to a `i128` field
note: the type is defined here
  --> $DIR/lint-fn.rs:37:1
   |
LL | pub struct TransparentI128(i128);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: 128-bit integers don't currently have a known stable ABI

error: `extern` fn uses type `TransparentStr`, which is not FFI-safe
  --> $DIR/lint-fn.rs:130:38
   |
LL | pub extern "C" fn transparent_str(p: TransparentStr) { }
   |                                      ^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`TransparentStr`) is FFI-unsafe due to a `&str` field
note: the type is defined here
  --> $DIR/lint-fn.rs:40:1
   |
LL | pub struct TransparentStr(&'static str);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider using `*const u8` and a length instead
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` fn uses type `TransparentBadFn`, which is not FFI-safe
  --> $DIR/lint-fn.rs:133:37
   |
LL | pub extern "C" fn transparent_fn(p: TransparentBadFn) { }
   |                                     ^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`TransparentBadFn`) is FFI-unsafe due to a `extern "C" fn() -> (u32, u64)` field
note: the type is defined here
  --> $DIR/lint-fn.rs:43:1
   |
LL | pub struct TransparentBadFn(RustBadRet); // note: non-null ptr assumption
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider using a raw pointer, or wrapping `extern "C" fn() -> (u32, u64)` in an `Option<_>`
   = note: boxes, references, and function pointers are assumed to be valid (non-null, non-dangling, aligned) pointers,
           which cannot be garanteed if their values are produced by non-rust code

error: `extern` fn uses type `&[u8; 4]`, which is not FFI-safe
  --> $DIR/lint-fn.rs:139:53
   |
LL | pub extern "C" fn argument_with_assumptions_4(aptr: &[u8; 4 as usize]) { }
   |                                                     ^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider using a raw pointer, or wrapping `&[u8; 4]` in an `Option<_>`
   = note: boxes, references, and function pointers are assumed to be valid (non-null, non-dangling, aligned) pointers,
           which cannot be garanteed if their values are produced by non-rust code

error: `extern` fn uses type `StructWithProjectionAndLifetime<'_>`, which is not FFI-safe
  --> $DIR/lint-fn.rs:144:50
   |
LL | pub extern "C" fn argument_with_assumptions_6(s: StructWithProjectionAndLifetime) { }
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`StructWithProjectionAndLifetime<'_>`) is FFI-unsafe due to a `&mut StructWithProjectionAndLifetime<'_>` field
note: the type is defined here
  --> $DIR/lint-fn.rs:19:1
   |
LL | pub struct StructWithProjectionAndLifetime<'a>(
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider using a raw pointer, or wrapping `&mut StructWithProjectionAndLifetime<'_>` in an `Option<_>`
   = note: boxes, references, and function pointers are assumed to be valid (non-null, non-dangling, aligned) pointers,
           which cannot be garanteed if their values are produced by non-rust code

error: `extern` fn uses type `TransparentRef<'_>`, which is not FFI-safe
  --> $DIR/lint-fn.rs:163:51
   |
LL | pub extern "C" fn argument_with_assumptions_14(p: TransparentRef) { }
   |                                                   ^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this struct/enum/union (`TransparentRef<'_>`) is FFI-unsafe due to a `&TransparentInt` field
note: the type is defined here
  --> $DIR/lint-fn.rs:49:1
   |
LL | pub struct TransparentRef<'a>(&'a TransparentInt);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider using a raw pointer, or wrapping `&TransparentInt` in an `Option<_>`
   = note: boxes, references, and function pointers are assumed to be valid (non-null, non-dangling, aligned) pointers,
           which cannot be garanteed if their values are produced by non-rust code

error: `extern` fn uses type `PhantomData<bool>`, which is not FFI-safe
  --> $DIR/lint-fn.rs:183:43
   |
LL | pub extern "C" fn unused_generic2<T>() -> PhantomData<bool> {
   |                                           ^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: composed only of `PhantomData`

error: `extern` fn uses type `Vec<T>`, which is not FFI-safe
  --> $DIR/lint-fn.rs:196:39
   |
LL | pub extern "C" fn used_generic4<T>(x: Vec<T>) { }
   |                                       ^^^^^^ not FFI-safe
   |
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `Vec<T>`
   = note: `Vec<T>` has unspecified layout

error: `extern` fn uses type `Vec<T>`, which is not FFI-safe
  --> $DIR/lint-fn.rs:199:41
   |
LL | pub extern "C" fn used_generic5<T>() -> Vec<T> {
   |                                         ^^^^^^ not FFI-safe
   |
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `Vec<T>`
   = note: `Vec<T>` has unspecified layout

error: aborting due to 26 previous errors

