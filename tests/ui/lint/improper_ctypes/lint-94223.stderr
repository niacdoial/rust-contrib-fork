error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:5:15
   |
LL | pub fn bad(f: extern "C" fn([u8])) {}
   |               ^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn([u8])` is FFI-unsafe due to `[u8]`
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: slices have no C equivalent
note: the lint level is defined here
  --> $DIR/lint-94223.rs:3:9
   |
LL | #![deny(improper_c_callbacks)]
   |         ^^^^^^^^^^^^^^^^^^^^

error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:8:28
   |
LL | pub fn bad_twice(f: Result<extern "C" fn([u8]), extern "C" fn([u8])>) {}
   |                            ^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn([u8])` is FFI-unsafe due to `[u8]`
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: slices have no C equivalent

error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:8:49
   |
LL | pub fn bad_twice(f: Result<extern "C" fn([u8]), extern "C" fn([u8])>) {}
   |                                                 ^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn([u8])` is FFI-unsafe due to `[u8]`
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: slices have no C equivalent

error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:12:18
   |
LL | struct BadStruct(extern "C" fn([u8]));
   |                  ^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn([u8])` is FFI-unsafe due to `[u8]`
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: slices have no C equivalent

error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:16:7
   |
LL |     A(extern "C" fn([u8])),
   |       ^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn([u8])` is FFI-unsafe due to `[u8]`
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: slices have no C equivalent

error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:21:7
   |
LL |     A(extern "C" fn([u8])),
   |       ^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn([u8])` is FFI-unsafe due to `[u8]`
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: slices have no C equivalent

error: `extern` callback uses type `[u8]`, which is not FFI-safe
  --> $DIR/lint-94223.rs:25:12
   |
LL | type Foo = extern "C" fn([u8]);
   |            ^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn([u8])` is FFI-unsafe due to `[u8]`
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: slices have no C equivalent

error: `extern` callback uses type `Option<&<T as FooTrait>::FooType>`, which is not FFI-safe
  --> $DIR/lint-94223.rs:32:20
   |
LL | pub type Foo2<T> = extern "C" fn(Option<&<T as FooTrait>::FooType>);
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `for<'a> extern "C" fn(Option<&'a <T as FooTrait>::FooType>)` is FFI-unsafe due to `Option<&<T as FooTrait>::FooType>`
   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum
   = note: enum has no representation hint

error: `extern` callback uses type `FfiUnsafe`, which is not FFI-safe
  --> $DIR/lint-94223.rs:42:17
   |
LL | pub static BAD: extern "C" fn(FfiUnsafe) = f;
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn(FfiUnsafe)` is FFI-unsafe due to `FfiUnsafe`
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `FfiUnsafe`
   = note: `FfiUnsafe` has unspecified layout
note: the type is defined here
  --> $DIR/lint-94223.rs:35:1
   |
LL | pub struct FfiUnsafe;
   | ^^^^^^^^^^^^^^^^^^^^

error: `extern` callback uses type `FfiUnsafe`, which is not FFI-safe
  --> $DIR/lint-94223.rs:45:30
   |
LL | pub static BAD_TWICE: Result<extern "C" fn(FfiUnsafe), extern "C" fn(FfiUnsafe)> = Ok(f);
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn(FfiUnsafe)` is FFI-unsafe due to `FfiUnsafe`
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `FfiUnsafe`
   = note: `FfiUnsafe` has unspecified layout
note: the type is defined here
  --> $DIR/lint-94223.rs:35:1
   |
LL | pub struct FfiUnsafe;
   | ^^^^^^^^^^^^^^^^^^^^

error: `extern` callback uses type `FfiUnsafe`, which is not FFI-safe
  --> $DIR/lint-94223.rs:45:56
   |
LL | pub static BAD_TWICE: Result<extern "C" fn(FfiUnsafe), extern "C" fn(FfiUnsafe)> = Ok(f);
   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn(FfiUnsafe)` is FFI-unsafe due to `FfiUnsafe`
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `FfiUnsafe`
   = note: `FfiUnsafe` has unspecified layout
note: the type is defined here
  --> $DIR/lint-94223.rs:35:1
   |
LL | pub struct FfiUnsafe;
   | ^^^^^^^^^^^^^^^^^^^^

error: `extern` callback uses type `FfiUnsafe`, which is not FFI-safe
  --> $DIR/lint-94223.rs:49:22
   |
LL | pub const BAD_CONST: extern "C" fn(FfiUnsafe) = f;
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `extern "C" fn(FfiUnsafe)` is FFI-unsafe due to `FfiUnsafe`
   = help: consider adding a `#[repr(C)]` (not `#[repr(C,packed)]`) or `#[repr(transparent)]` attribute to `FfiUnsafe`
   = note: `FfiUnsafe` has unspecified layout
note: the type is defined here
  --> $DIR/lint-94223.rs:35:1
   |
LL | pub struct FfiUnsafe;
   | ^^^^^^^^^^^^^^^^^^^^

error: aborting due to 12 previous errors

