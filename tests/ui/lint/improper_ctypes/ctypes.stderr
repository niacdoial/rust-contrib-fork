error: `extern` block uses type `Foo`, which is not FFI-safe
  --> $DIR/ctypes.rs:69:28
   |
LL |     pub fn ptr_type1(size: *const Foo);
   |                            ^^^^^^^^^^ not FFI-safe
   |
   = note: this reference (`*const Foo`) is ABI-compatible with a C pointer, but `Foo` itself does not have a C layout
   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct
   = note: this struct has unspecified layout
note: the type is defined here
  --> $DIR/ctypes.rs:31:1
   |
LL | pub struct Foo;
   | ^^^^^^^^^^^^^^
note: the lint level is defined here
  --> $DIR/ctypes.rs:7:9
   |
LL | #![deny(improper_ctypes)]
   |         ^^^^^^^^^^^^^^^

error: `extern` block uses type `Foo`, which is not FFI-safe
  --> $DIR/ctypes.rs:70:28
   |
LL |     pub fn ptr_type2(size: *const Foo);
   |                            ^^^^^^^^^^ not FFI-safe
   |
   = note: this reference (`*const Foo`) is ABI-compatible with a C pointer, but `Foo` itself does not have a C layout
   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct
   = note: this struct has unspecified layout
note: the type is defined here
  --> $DIR/ctypes.rs:31:1
   |
LL | pub struct Foo;
   | ^^^^^^^^^^^^^^

error: `extern` block uses type `((),)`, which is not FFI-safe
  --> $DIR/ctypes.rs:72:25
   |
LL |     pub fn ptr_tuple(p: *const ((),));
   |                         ^^^^^^^^^^^^ not FFI-safe
   |
   = note: this reference (`*const ((),)`) is ABI-compatible with a C pointer, but `((),)` itself does not have a C layout
   = help: consider using a struct instead
   = note: tuples have unspecified layout

error: `extern` block uses type `&[u32]`, which is not FFI-safe
  --> $DIR/ctypes.rs:73:26
   |
LL |     pub fn slice_type(p: &[u32]);
   |                          ^^^^^^ not FFI-safe
   |
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` block uses type `&str`, which is not FFI-safe
  --> $DIR/ctypes.rs:74:24
   |
LL |     pub fn str_type(p: &str);
   |                        ^^^^ not FFI-safe
   |
   = help: consider using `*const u8` and a length instead
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` block uses type `char`, which is not FFI-safe
  --> $DIR/ctypes.rs:77:25
   |
LL |     pub fn char_type(p: char);
   |                         ^^^^ not FFI-safe
   |
   = help: consider using `u32` or `libc::wchar_t` instead
   = note: the `char` type has no C equivalent

error: `extern` block uses type `i128`, which is not FFI-safe
  --> $DIR/ctypes.rs:78:25
   |
LL |     pub fn i128_type(p: i128);
   |                         ^^^^ not FFI-safe
   |
   = note: 128-bit integers don't currently have a known stable ABI

error: `extern` block uses type `u128`, which is not FFI-safe
  --> $DIR/ctypes.rs:79:25
   |
LL |     pub fn u128_type(p: u128);
   |                         ^^^^ not FFI-safe
   |
   = note: 128-bit integers don't currently have a known stable ABI

error: `extern` block uses type `(u32) is 1..=`, which is not FFI-safe
  --> $DIR/ctypes.rs:80:27
   |
LL |     pub fn pat_type1() -> pattern_type!(u32 is 1..);
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider using the base type instead
   = note: integers constrained to a given range cannot have their value be provided by non-rust code

error: `extern` block uses type `&dyn Bar`, which is not FFI-safe
  --> $DIR/ctypes.rs:82:26
   |
LL |     pub fn trait_type(p: &dyn Bar);
   |                          ^^^^^^^^ not FFI-safe
   |
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` block uses type `(i32, i32)`, which is not FFI-safe
  --> $DIR/ctypes.rs:83:26
   |
LL |     pub fn tuple_type(p: (i32, i32));
   |                          ^^^^^^^^^^ not FFI-safe
   |
   = help: consider using a struct instead
   = note: tuples have unspecified layout

error: `extern` block uses type `(i32, i32)`, which is not FFI-safe
  --> $DIR/ctypes.rs:84:27
   |
LL |     pub fn tuple_type2(p: I32Pair);
   |                           ^^^^^^^ not FFI-safe
   |
   = help: consider using a struct instead
   = note: tuples have unspecified layout

error: `extern` block uses type `ZeroSize`, which is not FFI-safe
  --> $DIR/ctypes.rs:85:25
   |
LL |     pub fn zero_size(p: ZeroSize);
   |                         ^^^^^^^^ not FFI-safe
   |
   = help: consider adding a member to this struct
   = note: this struct has no fields
note: the type is defined here
  --> $DIR/ctypes.rs:27:1
   |
LL | pub struct ZeroSize;
   | ^^^^^^^^^^^^^^^^^^^

error: `extern` block uses type `ZeroSizeWithPhantomData`, which is not FFI-safe
  --> $DIR/ctypes.rs:86:33
   |
LL |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData);
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: composed only of `PhantomData`
note: the type is defined here
  --> $DIR/ctypes.rs:66:1
   |
LL | pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `extern` block uses type `PhantomData<bool>`, which is not FFI-safe
  --> $DIR/ctypes.rs:89:12
   |
LL |         -> ::std::marker::PhantomData<bool>;
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: composed only of `PhantomData`

error: `extern` block uses type `fn()`, which is not FFI-safe
  --> $DIR/ctypes.rs:90:23
   |
LL |     pub fn fn_type(p: RustFn);
   |                       ^^^^^^ not FFI-safe
   |
   = help: consider using an `extern fn(...) -> ...` function pointer instead
   = note: this function pointer has Rust-specific calling convention

error: `extern` block uses type `fn()`, which is not FFI-safe
  --> $DIR/ctypes.rs:91:24
   |
LL |     pub fn fn_type2(p: fn());
   |                        ^^^^ not FFI-safe
   |
   = help: consider using an `extern fn(...) -> ...` function pointer instead
   = note: this function pointer has Rust-specific calling convention

error: `extern` block uses type `i128`, which is not FFI-safe
  --> $DIR/ctypes.rs:93:32
   |
LL |     pub fn transparent_i128(p: TransparentI128);
   |                                ^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: 128-bit integers don't currently have a known stable ABI

error: `extern` block uses type `&str`, which is not FFI-safe
  --> $DIR/ctypes.rs:94:31
   |
LL |     pub fn transparent_str(p: TransparentStr);
   |                               ^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider using `*const u8` and a length instead
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` block uses type `[u8; 8]`, which is not FFI-safe
  --> $DIR/ctypes.rs:96:27
   |
LL |     pub fn raw_array(arr: [u8; 8]);
   |                           ^^^^^^^ not FFI-safe
   |
   = help: consider passing a pointer to the array
   = note: passing raw arrays by value is not FFI-safe

error: `extern` block uses type `char`, which is not FFI-safe
  --> $DIR/ctypes.rs:98:12
   |
LL |         f: for<'a> extern "C" fn(a:char, b:&dyn Debug, c: Box<TwoBadTypes<'a>>)
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `for<'a, 'b> extern "C" fn(char, &'a (dyn Debug + 'a), Box<TwoBadTypes<'b>>)` is FFI-unsafe due to `char`
   = help: consider using `u32` or `libc::wchar_t` instead
   = note: the `char` type has no C equivalent

error: `extern` block uses type `&dyn Debug`, which is not FFI-safe
  --> $DIR/ctypes.rs:98:12
   |
LL |         f: for<'a> extern "C" fn(a:char, b:&dyn Debug, c: Box<TwoBadTypes<'a>>)
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `for<'a, 'b> extern "C" fn(char, &'a (dyn Debug + 'a), Box<TwoBadTypes<'b>>)` is FFI-unsafe due to `&dyn Debug`
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` block uses type `&[u8]`, which is not FFI-safe
  --> $DIR/ctypes.rs:98:12
   |
LL |         f: for<'a> extern "C" fn(a:char, b:&dyn Debug, c: Box<TwoBadTypes<'a>>)
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: the function pointer to `for<'a, 'b> extern "C" fn(char, &'a (dyn Debug + 'a), Box<TwoBadTypes<'b>>)` is FFI-unsafe due to `Box<TwoBadTypes<'_>>`
   = note: this reference (`Box<TwoBadTypes<'_>>`) is ABI-compatible with a C pointer, but `TwoBadTypes<'_>` itself does not have a C layout
   = note: this struct/enum/union (`TwoBadTypes<'_>`) is FFI-unsafe due to a `&[u8]` field
note: the type is defined here
  --> $DIR/ctypes.rs:60:1
   |
LL | pub struct TwoBadTypes<'a> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: consider using a raw pointer to the slice's first element (and a length) instead
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` block uses type `&UnsizedStructBecauseDyn`, which is not FFI-safe
  --> $DIR/ctypes.rs:106:47
   |
LL |     pub fn struct_unsized_ptr_has_metadata(p: &UnsizedStructBecauseDyn);
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = note: this reference to an unsized type contains metadata, which makes it incompatible with a C pointer

error: `extern` block uses type `Option<UnsafeCell<extern "C" fn()>>`, which is not FFI-safe
  --> $DIR/ctypes.rs:108:26
   |
LL |     pub fn no_niche_a(a: Option<UnsafeCell<extern "C" fn()>>);
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum
   = note: enum has no representation hint

error: `extern` block uses type `Option<UnsafeCell<&i32>>`, which is not FFI-safe
  --> $DIR/ctypes.rs:110:26
   |
LL |     pub fn no_niche_b(b: Option<UnsafeCell<&i32>>);
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe
   |
   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum
   = note: enum has no representation hint

error: `extern` block uses type `u128`, which is not FFI-safe
  --> $DIR/ctypes.rs:113:34
   |
LL |     pub static static_u128_type: u128;
   |                                  ^^^^ not FFI-safe
   |
   = note: 128-bit integers don't currently have a known stable ABI

error: `extern` block uses type `u128`, which is not FFI-safe
  --> $DIR/ctypes.rs:114:40
   |
LL |     pub static static_u128_array_type: [u128; 16];
   |                                        ^^^^^^^^^^ not FFI-safe
   |
   = note: 128-bit integers don't currently have a known stable ABI

error: aborting due to 28 previous errors

